searchState.loadedDescShard("fitsio", 0, "<code>fitsio</code> - a thin wrapper around the <code>cfitsio</code> C library.\nRepresentation of the version of cfitsio used within …\nEnumeration of file open modes\nMain entry point to the FITS file format\nReturn a pointer to the underlying C <code>fitsfile</code> object …\nCreate a new fits file on disk\nCreate a new fits image, and return the <code>FitsHdu</code> object.\nCreate a new fits table\nExecutes the destructor for this type. Read more\nOpen a fits file in read/write mode\nErrors and error handling\nReturn the file path of the file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad a <code>FitsFile</code> from a <code>fitsio_sys::fitsfile</code> pointer.\nFits HDU related code\nReturn a new HDU object\nHeader-related code\nImage related code\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate over the HDUs in the file\nMajor version\nMinor version\nOpen a fits file from disk\nPretty-print file to stdout\nPretty-print the fits file structure to any <code>Write</code> …\nReturn the primary hdu (HDU 0)\nTable-related code\nCreate a threadsafe <code>ThreadsafeFitsFile</code> copy of the current …\nThread-safe FitsFile struct\nContains the error value\nEnumeration of all error types\nFile path already exists\nInternal Fits errors\nError type\nInvalid index error\nError raised when the user requests invalid indexes for …\nString conversion errors\nIO errors\nGeneric errors from simple strings\nString conversion errors\nNull pointer error\nContains the success value\nHandy error type for use internally\nError unlocking a mutex\nUTF-8 conversion errors\nFunction for chaining result types\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe range requested by the user\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError message\n<code>cfitsio</code> message for error code\n<code>cfitsio</code> error code\nHdu description type\nStruct representing a FITS HDU\nIterator over fits HDUs\nDescription of the current HDU\nAdd a new column to the end of the table\nMethod by which the current HDU of a file can be changed\nIterate over the columns in a fits file\nCopy an HDU to another open fits file\nDelete the current HDU from the fits file.\nRemove a column from the fits file\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInformation about the current HDU\nInsert a column into a fits table\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the HDU name\nThe HDU number within the fits file. Zero indexed.\nRead a single value from a fits table\nRead a subset of a fits column\nRead a subset of a fits column\nRead a whole image into a new <code>Vec</code>\nRead header key\nRead a square region from the chip.\nRead a single row from a fits image\nExample\nRead pixels from an image between a start index and end …\nResize a HDU image\nExtract a single row from the file\nWrite data to an entire column\nWrite data to part of a column\nWrite an entire image to the HDU passed in\nWrite a fits key to the current header\nWrite a rectangular region to the fits image\nWrite raw pixel values to a FITS image\nStruct representing a FITS header value\nTrait applied to types which can be read from a FITS header\nWriting a fits keyword\nMonadic “bind” for <code>HeaderValue</code>\nOptional comment of the header card\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMap the <em>value</em> of a <code>HeaderValue</code> to another form\nValue of the header card\nDescription of a new image\nData types used for defining images\nReading fits images\nReading fits images\nData type of the new image\nShape of the image\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nColumns of different types\nDescription of the column data\nTypes a column can represent\nDescription for new columns\nIterator type for columns\nConcrete representation of the description of a column\nWay of describing a column location\nTrait derivable with custom derive\nTrait for reading a fits column\nTrait representing the ability to write column data\nRender the <code>ColumnDescription</code> into a …\nType of the data, see the cfitsio documentation\nType of the data, see the cfitsio documentation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMethod by which the column number can be computed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of the column\nName of the column\nCreate a new <code>ColumnDescription</code> from a name\nCreate a new column data description\nDoes the column contain multiple values?\nShortcut for creating a scalar column\nMake the column repeat\nWhat data type does the column store?\nShortcut for creating a vector column\nHow wide is the column?\nAdd a data type to the column description\nDefine the column width\nThread-safe <code>FitsFile</code> representation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLock the underlying mutex to return exclusive access to …")